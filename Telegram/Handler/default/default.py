from datetime import datetime

from colorama import Fore

from Data import admins
from Keyboard.Reply import student_menu, teacher_menu, employee_menu, admin_menu
from app import bot
from app import dp
from aiogram import types, Dispatcher
import aiogram.utils.exceptions as exceptions

from utils.database_api.database_gino import on_startup, on_close


async def get_default_commands(dp: Dispatcher):
    try:
        await on_close(dp)
    except Exception as _ex:
        print(Fore.LIGHTRED_EX + f"{_ex} | On Close Exception" + Fore.RESET)
    await on_startup(dp)
    await bot.set_my_commands(
        [
            types.BotCommand("start", "–ù–∞—á–∞–ª–æ –†–∞–±–æ—Ç—ã / –û–±–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞."),
            types.BotCommand("application", "–ó–∞—è–≤–ª–µ–Ω–∏–µ."),
            types.BotCommand("help", "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏. üßê")
        ]
    )
    # from Handler import register_handlers
    # register_handlers(dp)
    print(Fore.GREEN + f"{datetime.now()}: –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω" + Fore.RESET)

    for admin_id in admins:
        try:
            await bot.send_message(chat_id=admin_id, text=" –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
        except exceptions.ChatNotFound:
            print(Fore.RED + f"{datetime.now()}: –ù–µ—Ç —á–∞—Ç–∞ —Å {admin_id}" + Fore.RESET)


def get_access_level(access: str) -> str:
    dict_user_access_level = {
        'S': '–°—Ç—É–¥–µ–Ω—Ç',
        'I': '–°—Ç—É–¥–µ–Ω—Ç',
        'T': '–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å',
        'E': '–°–æ—Ç—Ä—É–¥–Ω–∏–∫',
        'A': '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä'
    }
    return dict_user_access_level[access]


def get_reply_keyboard(access: str) -> types.ReplyKeyboardMarkup:
    match access:
        case 'S':
            return student_menu
        case 'I':
            return student_menu
        case 'T':
            return teacher_menu
        case 'E':
            return employee_menu
        case 'A':
            return admin_menu


def return_user_checked(user_registered: bool = True) -> str:
    return f"–û—Ç–∫—Ä—ã–ª!" if user_registered else f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! \n" \
                                              f"–í—ã <b>–Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã</b>." \
                                              f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–∞—è–≤–∫—É: <b>/application</b>."


async def soon_info() -> str:
    return "–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Å–∫–æ—Ä–æ –ø–æ—è–≤–∏—Ç—Å—è."
